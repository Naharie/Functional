[<RequireQualifiedAccess>]
module Functional.Option

/// <summary>
/// Inverts the specified option, filling in <paramref name="fallback"/> when <paramref name="option"/> is None.
/// </summary>
/// <param name="fallback">The value to be filled in when <paramref name="option"/> is None.</param>
/// <param name="option">The Option to invert.</param>
let invert fallback option =
    match option with
    | Some _ -> None
    | None -> Some fallback

/// <summary>
/// Returns the result of the function wrapped in Some if it succeeds, and None if the function throws an error.
/// </summary>
/// <param name="func">The function to attempt running.</param>
/// <returns>Some(result) if <paramref name="func"/> succeeded or None if it did not.</returns>
let attempt func =
    try Some <| func ()
    with | _ -> None

/// <summary>
/// Converts a tuple from a try parse function into an option.
/// </summary>
/// <param name="check">Whether or not <paramref name="value"/> contains meaningful data.</param>
/// <param name="value">If initialized, the data to wrap.</param>
/// <returns>An option wrapping the specified data based on the initialization flag.</returns>
let ofTuple (check, value) =
    if check then Some value else None

/// <summary>
/// Converts a Result&lt;'t, 'e&gt; to an option.
/// </summary>
/// <param name="result">The result to convert</param>
/// <returns>An option containing Some(x) if <paramref name="result"/> was Ok(x) or None if <paramref name="result"/> was Error(_).</returns>
let ofResult result =
    match result with
    | Ok value -> Some value
    | Error _ -> None

/// <summary>
/// Converts an Option to a Result with the specified error case if needed.
/// </summary>
/// <param name="error">The error value to use when <paramref name="option"/> is None.</param>
/// <param name="option">The Option to convert.</param>
/// <returns>The converted option.</returns>
let toResult error option =
    match option with
    | Some value -> Ok value
    | None -> Error error

/// <summary>
/// Converts an Option to a Result where the error case is generated by the provided function.
/// </summary>
/// <param name="thunk">A function that generates an error case if needed.</param>
/// <param name="option">The Option to convert.</param>
/// <returns>The converted Option.</returns>
let toResultWith thunk option =
    match option with
    | Some value -> Ok value
    | None -> Error (thunk())

/// <summary>
/// Converts a boolean into a unit Option.
/// </summary>
/// <param name="value">The value to convert.</param>
/// <returns>A unit Option.</returns>
let ofBoolean value =
    match value with
    | true -> Some ()
    | false -> None

/// <summary>
/// Converts an option into a unit Option.
/// </summary>
/// <param name="value">The option to remove the value from.</param>
/// <returns>A new unit Option.</returns>
let ignore value = Option.map ignore value