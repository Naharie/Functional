[<RequireQualifiedAccess>]
module Functional.Option

/// Inverts the specified option, filling in newValue in the case of Some.
let invert newValue option =
    match option with
    | Some _ -> None
    | None -> Some newValue

/// Returns the result of the function wrapped in Some if it succeeds, and None if the function throws an error.
let attempt func =
    try Some <| func ()
    with | _ -> None

/// Converts a tuple from a try parse function into an option.
let ofTuple (check, value) =
    if check then Some value else None

/// Converts a Result<'T, 'E> to an option.
let ofResult result =
    match result with
    | Ok value -> Some value
    | Error _ -> None

/// Converts an Option<'T> to a Result<'T, 'E> where the error case is the provided parameter.
let toResult error option =
    match option with
    | Some value -> Ok value
    | None -> Error error

/// Converts an Option<'T> to a Result<'T, 'E> where the error case is generated by the provided parameter.
let toResultWith thunk option =
    match option with
    | Some value -> Ok value
    | None -> Error (thunk())

/// Converts a boolean into a unit option.
let ofBoolean value =
    match value with
    | true -> Some ()
    | false -> None

/// Converts the input Option<'T> to an Option<unit>.
let ignore value = Option.map ignore value