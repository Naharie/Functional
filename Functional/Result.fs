[<RequireQualifiedAccess>]
module Functional.Result

/// Returns the result of the function wrapped in Ok if it succeeds, and an Error case wrapping the exception if it does not.
let attempt func =
    try Ok <| func ()
    with | error -> Error error

/// Converts a Result<'T, 'E> to an option.
let toOption result =
    match result with
    | Ok value -> Some value
    | Error _ -> None

/// Converts an Option<'T> to a Result<'T, 'E> where the error case is the provided parameter.
let ofOption error option =
    match option with
    | Some value -> Ok value
    | None -> Error error

/// Converts an Option<'T> to a Result<'T, 'E> where the error case is generated by the provided parameter.
let ofOptionWith thunk option =
    match option with
    | Some value -> Ok value
    | None -> Error (thunk())