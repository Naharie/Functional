[<RequireQualifiedAccess>]
module Functional.Result

/// <summary>
/// Returns the result of the function wrapped in Ok if it succeeds, and an Error case wrapping the exception if it does not.
/// </summary>
/// <param name="func">The function to attempt running.</param>
/// <returns>Ok(x) where x is the result of <paramref name="func"/> if it succeeds or Error(e) where e is the thrown exception.</returns>
let attempt func =
    try Ok <| func ()
    with | error -> Error error

/// <summary>
/// Converts an Option to a Result with the specified error case if needed.
/// </summary>
/// <param name="error">The error value to use when <paramref name="option"/> is None.</param>
/// <param name="option">The Option to convert.</param>
/// <returns>The converted option.</returns>
let ofOption error option =
    match option with
    | Some value -> Ok value
    | None -> Error error

/// <summary>
/// Converts an Option to a Result where the error case is generated by the provided function.
/// </summary>
/// <param name="thunk">A function that generates an error case if needed.</param>
/// <param name="option">The Option to convert.</param>
/// <returns>The converted Option.</returns>
let ofOptionWith thunk option =
    match option with
    | Some value -> Ok value
    | None -> Error (thunk())